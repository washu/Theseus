syntax = "proto3";

package ai.eloquent.raft;

option java_package = "ai.eloquent.raft";
option java_outer_classname = "EloquentRaftProto";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CORE RAFT ALGORITHM
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

service Raft {
  rpc rpc(RaftMessage) returns (RaftMessage);
}

/**
 * A common class for all sorts of Raft requests, wrapped in relevant
 * metadata.
 */
message RaftMessage {
  /** If true, we are expecting a response to this request over the RPC channel. */
  bool  isRPC  = 1;
  /** The contents of the message. This is one of the usual message types. */
  oneof contents {
    // -- The Requests
    AppendEntriesRequest    appendEntries         = 2;
    RequestVoteRequest      requestVotes          = 3;
    ApplyTransitionRequest  applyTransition       = 4;
    AddServerRequest        addServer             = 5;
    RemoveServerRequest     removeServer          = 6;
    InstallSnapshotRequest  installSnapshot       = 7;
    // -- The Replies
    AppendEntriesReply      appendEntriesReply    = 8;
    RequestVoteReply        requestVotesReply     = 9;
    ApplyTransitionReply    applyTransitionReply  = 10;
    AddServerReply          addServerReply        = 11;
    RemoveServerReply       removeServerReply     = 12;
    InstallSnapshotReply    installSnapshotReply  = 13;
  }
  /** The name of the node that sent this message. */
  string sender = 14;
}


//
// AppendEntriesRPC
//
// Receiver implementation:
//
// 1. Reply false if term < currentTerm
// 2. Reply false if log doesn't contain an entry at prevLogIndex whose term matches prevLogTerm
// 3. If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all
//    that follow it.
// 4. Append any new entries not already in the log
// 5. If leaderCommit > commitIndex, set commitIndex = min(leaderCommit, index of last new entry)
//

message AppendEntriesRequest {
  // Leader's term
  uint64 term = 1;
  // so follower can redirect clients
  string leaderName = 2;
  // index of log entry immediately preceding new ones
  uint64 prevLogIndex = 3;
  // term of log entry immediately preceding new ones
  uint64 prevLogTerm = 4;
  // log entries to store (empty for heartbeat; may send more than one for efficiency)
  repeated LogEntry entry = 5;
  // the leader's commitIndex
  uint64 leaderCommit = 6;
  // NOT STANDARD RAFT: the leader's timestamp, so we can compute the timish values across the cluster
  uint64 leaderTimish = 7 [deprecated=true];
}

message AppendEntriesReply {
  /** currentTerm, for the leader to update itself */
  uint64 term = 1;
  /** true if the follower contained an entry matching prevLogIndex and prevLogTerm */
  bool success = 2;
  /**
   * The last index replicated on this server. Serves to both signal replication, and
   * ask for logs starting at a given index.
   */
  uint64 nextIndex = 3;
  /** The name of the follower that sent this reply. */
  string followerName = 4;
  /** NOT STANDARD RAFT: If true, this node is not in the quorum, and should perhaps be. */
  bool missingFromQuorum = 5;
}

//
// RequestVoteRPC
//
// Receiver implementation:
//
// 1. Reply false if term < currentTerm
// 2. If votedFor is null or candidateId, and candidate's log is at least as up-to-date as receiver's log, grant vote
//

message RequestVoteRequest {
  // Candidate's term
  uint64 term = 1;
  // the candidate requesting votes
  string candidateName = 2;
  // index of candidate's last log entry
  uint64 lastLogIndex = 3;
  // term of candidate's last log entry
  uint64 lastLogTerm = 4;
}

message RequestVoteReply {
  // the term of both the voter and requester -- these will be the same by the time the response is sent
  uint64 term          = 1;
  // the term of the follower, who is giving the vote. This should always be the same as |term| above
  uint64 voterTerm     = 4 [deprecated=true];
  // true means candidate received vote
  bool   voteGranted   = 2;
  // The name of the follower that sent this reply. */
  string voterName     = 3;
}

//
// ApplyTransitionRPC
//
// Receiver implemenation:
//
// 1. Reply false if not leader
// 2. Create new log entry at the end of the log
// 3. Reply with index and term of log entry
//

message ApplyTransitionRequest {
  // term of the requesting node
  uint64 term = 1;
  oneof payload {
    // serialized copy of the state transition
    bytes transition = 2;
    // or, the addition of a hospice member
    string new_hospice_member = 4;
  };
  // the nodes that this request has already been forwarded through, for loop detection
  repeated string forwardedBy = 3;
}

message ApplyTransitionReply {
  // currentTerm, for requester to update itself
  uint64 term = 1;
  // false if we this node is no longer the leader and the transition couldn't be applied
  bool success = 2;
  // the index of the log entry
  uint64 newEntryIndex = 3;
  // the term of the log entry
  uint64 newEntryTerm = 4;
}

//
// LogEntry
//
// A log is composed of a list of LogEntry objects.
//

enum LogEntryType {
  TRANSITION = 0;
  CONFIGURATION = 1;
}

message LogEntry {
  // the index of the log entry
  uint64 index = 1;
  // term when the log entry was created
  uint64 term = 2;
  // the type of the log entry
  LogEntryType type = 3;
  oneof payload {
    // the raw bytes of the transition request - only in TRANSITION messages
    bytes transition = 4;
    // or, the addition of a hospice member - only in TRANSITION messages
    string new_hospice_member = 6;
  }
  // the new configuration for the cluster - only in CONFIGURATION
  repeated string configuration = 5;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MEMBERSHIP CHANGES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum MembershipChangeStatus {
  /** The membership change was successful */
  OK = 0;
  /** A timeout was reached before membership could complete. */
  TIMEOUT = 1;
  /** The node is not the leader. */
  NOT_LEADER = 2;
  /** Some other error went wrong. This should never happen in normal operation. */
  OTHER_ERROR = 3;
}

//
// AddServerRPC
//
// Receiver implementation:
//
// 1. Reply NOT_LEADER if not leader
// 2. Catch up server for a fixed number of rounds. Reply TIMEOUT if a server does not make progress for an election
//    timeout or if the last round takes longer than the election timeout.
// 3. Wait until previous configuration in log is committed
// 4. Append a new configuration entry to the log, (old configuration plus new server), commit it using a majority of
//    the new configuration.
// 5. Reply OK
//

message AddServerRequest {
  /** the name of the new server to add to the configuration */
  string newServer = 1;
  /** NOT STANDARD RAFT: The set of servers in the new configuration. This is just a sanity check. */
  repeated string quorum = 2;
  // the nodes that this request has already been forwarded through, for loop detection
  repeated string forwardedBy = 3;
}

message AddServerReply {
  // OK if the server was added successfully
  MembershipChangeStatus status = 1;
  // address of recent leader, if known
  string leadershipHint = 2;
}

//
// RemoveServerRPC
//
// Receiver implementation:
//
// 1. Reply NOT_LEADER if not leader
// 2. Wait until previous configuration in log is committed
// 3. Append a new configuration entry to the log, (old configuration plus new server), commit it using a majority of
//    the new configuration.
// 4. Reply OK and, if this server was removed, step down
//

message RemoveServerRequest {
  /** the name of the server to remove from the configuration */
  string oldServer = 1;
  /** NOT STANDARD RAFT: The set of servers in the new configuration. This is just a sanity check. */
  repeated string quorum = 2;
  // the nodes that this request has already been forwarded through, for loop detection
  repeated string forwardedBy = 3;
}

message RemoveServerReply {
  // OK if the server was removed successfully
  MembershipChangeStatus status = 1;
  // address of recent leader, if known
  string leadershipHint = 2;
}

//
// LivenessCheckRPC
//
// Receiver implementation:
//
// 1. Reply false if we're currently shutting down or booting up, true otherwise
//

message LivenessCheckRequest {}

message LivenessCheckReply {
  // False if we're currently shutting down or booting up, true otherwise
  bool live = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOG COMPACTION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Leaders invoke the InstallSnapshot RPC to send snapshots to slow followers. Leaders
// resort to sending a snapshot only when they have already discarded the next log entry needed
// to replicate entries to the follower with AppendEntries. They split the snapshot into chunks for
// transmission. Among other benefits, this gives the follower a sign of life with each chunk, so it
// can reset its election timer. Each chunk is sent in order, which simplifies writing the file to disk.
// The RPC includes the state needed for Raft to load the snapshot on a restart: the index and term
// of the last entry covered by the snapshot, and the latest configuration at that point.

message InstallSnapshotRequest {
  // Leader's term
  uint64 term = 1;
  // So the follower can redirect clients
  string leaderName = 2;
  // The snapshot replaces all entries up through and including this index
  uint64 lastIndex = 3;
  // The term of lastIndex
  uint64 lastTerm = 4;
  // The latest cluster configuration as of lastIndex (included only with the first chunk)
  repeated string lastConfig = 5;
  // raw bytes of the snapshot
  bytes data = 6;
}

message InstallSnapshotReply {
  // currentTerm, for the leader to update itself
  uint64 term = 1;
  // index of candidate's last log entry
  uint64 nextIndex = 2;
  // The name of the follower that sent this reply. */
  string followerName = 3;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATE MACHINE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

message StateMachine {
  // the actual implementation of the state machine -- implementation specific so we save it as bytes
  bytes payload = 1;
  // The list of nodes in the hospice
  repeated string hospice = 2;
}
